# alerta_service.py

import logging
from ask_sdk_model.interfaces.alexa.presentation.apl import (
    RenderDocumentDirective,
    ExecuteCommandsDirective,
    SendEventCommand
)
from utils import limpar_asset_name  # onde estiver sua função
from utils import state_asset_mapping
from utils import _load_apl_document
from scraper import web_scrape
import grava_historico

def tratar_alerta(session_attr: dict, slots: dict) -> dict:
    """
    Resultado:
      action:  "ask_value" | "ask_fund" | "show_apl" | "create" | "error"
      speech: texto a ser falado
      reprompt: opcional, texto para reprompt
      directives: opcional, lista de directives APL/Commands
    """
    # 1) Se slot de fundName veio, grava IMEDIATAMENTE em sessão
    slot_asset = slots.get("fundName")
    if slot_asset and slot_asset.value:
        session_attr["sigla_alerta"] = limpar_asset_name(slot_asset.value)
        logging.info(f"[Service] Slot fundName salvo em sessão: {session_attr['sigla_alerta']}")

    # 2) Recupera o ativo da sessão (pode ter vindo de APL ou do slot acima)
    asset_name = session_attr.get("sigla_alerta")
    # Se ainda não tiver asset_name, tenta seleção via APL (current_asset_id/name)
    if not asset_name:
        cid = session_attr.get("current_asset_id")
        cname = session_attr.get("current_asset_name")
        if cid and cname:
            asset_name = limpar_asset_name(cname)
            session_attr["sigla_alerta"] = asset_name
            logging.info(f"[Service] Usando ativo atual: {asset_name}")
        else:
            # nunca apareceu nomal na sessão → pergunta somente 1x
            session_attr["alert_in_progress"] = True
            return {
                "action": "ask_fund",
                "speech": "Para qual ativo você quer criar o alerta?",
                "reprompt": "Por favor, diga o nome do ativo."
            }

    # 3) Normaliza e identifica full name + id
    sigla = asset_name  # já limpo
    ativos_permitidos = [limpar_asset_name(n) for n in state_asset_mapping.values()]
    asset_full, asset_state_id = next(
        ((n, sid)
         for sid, n in state_asset_mapping.items()
         if limpar_asset_name(n) == sigla),
        (None, None)
    )

    # 4) Valor do alerta: só entra aqui se não tiver sido montado
    alert_value = session_attr.get("AlertValue")
    if alert_value is None:
        # lê slots de valor
        rv = slots.get("alertValue")
        cv = slots.get("alertValueCents")
        real = rv.value if rv and rv.value else None
        cents = cv.value if cv and cv.value else None

        # 4.1) nenhum slot de valor informado -> pergunta 1x
        if not real and not cents:
            session_attr["alert_in_progress"] = True
            return {
                "action": "ask_value",
                "speech": "Qual é o valor do alerta em reais e centavos?",
                "reprompt": "Por favor, diga o valor em reais e centavos."
            }

        # 4.2) monta AlertValue
        if real and cents:
            session_attr["AlertValue"] = f"{real},{cents}"
        elif real:
            session_attr["AlertValue"] = f"{real},00"
        else:
            session_attr["AlertValue"] = f"0,{cents}"

        logging.info(f"[Service] AlertValue montado: {session_attr['AlertValue']}")

    # 5) Valida sigla: se inválida, exibe APL 1x
    if sigla not in ativos_permitidos or not asset_full:
        session_attr["alert_in_progress"] = True
        apl = _load_apl_document("apl_add_alerta.json")
        return {
            "action": "show_apl",
            "speech": "Não consegui identificar esse ativo. Digite manualmente na tela.",
            "directives": [
                RenderDocumentDirective(token="inputScreenToken", document=apl)
            ]
        }

    # 6) Tudo OK: CRIA o alerta
    alert_value = session_attr["AlertValue"]
    key = f"alert_value_{sigla}"
    session_attr[key] = alert_value
    logging.info(f"[Service] Salvando alerta: {sigla} → {alert_value}")

    # Grava histórico
    valor_formatado = f"R$ {alert_value}"
    grava_historico.gravar_historico(key, valor_formatado)
    historico = grava_historico.ler_historico(key)
    texto_hist = grava_historico.gerar_texto_historico(historico, "alert")
    logging.info(f"[Service] Histórico gerado: {texto_hist}")

    # Prepara directives de retorno (tela inicial + navegação)
    first_asset = state_asset_mapping[1]
    dados_info, _, _, _, apl_doc, _ = web_scrape(first_asset)
    directives = [
        RenderDocumentDirective(
            token="mainScreenToken",
            document=apl_doc,
            datasources={"dados_update": {**dados_info}}
        ),
        ExecuteCommandsDirective(
            token="mainScreenToken",
            commands=[SendEventCommand(arguments=["autoNavigate"], delay=5000)]
        )
    ]

    # Limpa estado
    session_attr["AlertValue"] = None
    session_attr["alert_in_progress"] = False
    session_attr["manual_selection"] = False
    session_attr["state"] = 2

    speech = f"Alerta de preço de {alert_value} criado para o fundo {asset_full}. Voltando à tela inicial."
    return {
        "action": "create",
        "speech": speech,
        "directives": directives
    }